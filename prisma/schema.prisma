generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum Role {
  ADMIN
  MEMBER
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String // Original name with proper casing for display
  slug        String // URL-friendly slug for uniqueness and routing
  description String?
  orgId       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  services Service[]

  // Ensure slug is unique within each organization
  @@unique([slug, orgId])
  @@index([orgId])
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String // URL-friendly slug for uniqueness and routing
  description String?
  price       Float
  duration    Int // Duration in minutes
  categoryId  String   @db.ObjectId
  orgId       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  memberServices MemberService[]

  // Ensure slug is unique within each organization
  @@unique([slug, orgId])
  @@index([categoryId])
  @@index([orgId])
}

model Member {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId          String    @unique
  orgId            String
  role             Role      @default(MEMBER)
  username         String
  email            String
  phone            String?
  profileImage     String?
  jobTitle         String?
  bio              String?
  workingHours     Json? // Store working hours as JSON
  isActive         Boolean   @default(true)
  commissionRate   Float? // Commission percentage (0-100)
  hourlyRate       Float? // Hourly rate for services
  dateOfBirth      DateTime?
  address          Json? // Store address as JSON
  emergencyContact Json? // Store emergency contact as JSON
  startDate        DateTime  @default(now())
  endDate          DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relationships
  memberServices MemberService[]

  @@unique([email, orgId])
  @@index([orgId])
}

model MemberService {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  memberId  String   @db.ObjectId
  serviceId String   @db.ObjectId
  orgId     String
  createdAt DateTime @default(now())

  // Relationships
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  // Ensure a member can only be assigned to a service once
  @@unique([memberId, serviceId])
  @@index([orgId])
}
